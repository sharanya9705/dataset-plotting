# -*- coding: utf-8 -*-
"""dataset-plotting.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/193lbczm8rspjF1-RWouyzs0CrRdAk-M8
"""

from google.colab import files
uploaded = files.upload()
import os
print(os.listdir())

import pandas as pd

file_path = 'soil erosion dataset (1).xlsx'  # Update if necessary
df = pd.read_excel(file_path)

# Show the first few rows of the dataset
df.head()

from google.colab import drive
drive.mount('/content/drive')

file_path = '/content/drive/My Drive/datasets/soil erosion dataset (1).xlsx'

import pandas as pd
file_path = '/content/drive/My Drive/soil erosion dataset (1).xlsx'
df = pd.read_excel(file_path)
#print(df.head())
from sklearn.preprocessing import LabelEncoder

label_encoders = {}
categorical_columns = ['Region', 'Soil Type', 'Land Use Type']

for col in categorical_columns:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le
df['Latitude'] = df['Latitude'].str.extract(r'([\d\.]+)').astype(float)
df['Longitude'] = df['Longitude'].str.extract(r'([\d\.]+)').astype(float)
X = df.drop(columns=['Erosion rate (t/ha/year)'])
y = df['Erosion rate (t/ha/year)']
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


from sklearn.ensemble import RandomForestRegressor

model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
from sklearn.metrics import mean_squared_error
import numpy as np

rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print(f"RMSE: {rmse}")

from sklearn.model_selection import GridSearchCV

param_grid = {
    'n_estimators': [50, 100, 150],
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

grid_search = GridSearchCV(estimator=model, param_grid=param_grid, cv=3, scoring='neg_mean_squared_error', verbose=2, n_jobs=-1)
grid_search.fit(X_train, y_train)

best_model = grid_search.best_estimator_

importances = model.feature_importances_
for feature, importance in zip(X.columns, importances):
    print(f"{feature}: {importance:.4f}")


from sklearn.model_selection import GridSearchCV

param_grid = {
    'n_estimators': [50, 100, 150],
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

grid_search = GridSearchCV(estimator=model, param_grid=param_grid, cv=3, scoring='neg_mean_squared_error', verbose=2, n_jobs=-1)
grid_search.fit(X_train, y_train)

best_model = grid_search.best_estimator_
importances = model.feature_importances_
for feature, importance in zip(X.columns, importances):
    print(f"{feature}: {importance:.4f}")

# Data for feature importances (as extracted from the provided output)
importances = [0.0503, 0.0316, 0.2538, 0.0699, 0.1267, 0.1902, 0.2775]
features = [
    "Latitude",
    "Longitude",
    "Region",
    "Rainfall (mm)",
    "Soil Type",
    "Vegetation Cover (%)",
    "Land Use Type",
]

# Plot feature importances as a bar chart
import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
plt.bar(features, importances, color='red')
plt.xlabel('Features', fontsize=14)
plt.ylabel('Importance', fontsize=14)
plt.title('Feature Importances from Random Forest Model', fontsize=16)
plt.xticks(rotation=45, fontsize=12)
plt.tight_layout()
plt.show()